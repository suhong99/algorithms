// https://school.programmers.co.kr/learn/courses/30/lessons/258705

// 1. 4가지의 방법중 다이아몬드는 위쪽 삼각형 있어야 가능
// 2. 전 방법에서 우측 사각형을 선택하면 다음번에 좌측 사각형 선택 불가
// 3. 우측 사각형을 선택한 것 유무를 구분하면서 dp
// 4. 위쪽 삼각형 유무에 따른 경우에수 차이 고려

//  일반 경우 가능한 수 3개, 위쪽이 있으면 4개
// 전 번이 우측 삼각형인 경우 2개, 위쪽이 있으면 3개

function solution(n, tops) {
  const dp = Array(n)
    .fill()
    .map(() => [0, 0]);

  if (tops[0] === 1) {
    dp[0][0] = 3;
    dp[0][1] = 1;
  } else {
    dp[0][0] = 2;
    dp[0][1] = 1;
  }
  for (let i = 1; i < n; i++) {
    if (tops[i] === 1) {
      dp[i][0] = (dp[i - 1][0] * 3 + dp[i - 1][1] * 2) % 10007;
      dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % 10007;
    } else {
      dp[i][0] = (dp[i - 1][0] * 2 + dp[i - 1][1] * 1) % 10007;
      dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) % 10007;
    }
  }

  return (dp[n - 1][0] + dp[n - 1][1]) % 10007;
}
solution(4, [1, 1, 0, 1]);

solution(10, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
